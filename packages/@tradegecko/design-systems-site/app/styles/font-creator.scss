//  Font creator to make font creation more maintainable.
//
//  Requires a file to be loaded in after this one containing the following objects:
//  $base-font-styling()
//  $font-families()
//  $font-sizes()
//  $font-weights()
//  $text-styles()
//
//  base-font-styling should contain:
//    size - Number - the base font size in pixels
//
//  font-families should contain:
//    [font-name]: ("font family 1", serif) - this defines a font
//
//  $font-weights should contain:
//    _default: ()    - the default font weights to use
//    [font-name]: () - the font weights to use for this font
//  _default should contain a list of all font-weight names and their default values
//  Each other object should match a font name and contain any font weights which should override _default
//
//  $text-styles should contain a list of styles wanted for that font.
//  Each font style requires the 'family' key with a value linking to one of the defined font-families
//  A font may extend another defined, or mutliple defined, fonts by using:
//    extend: font1 font2,
//  Weight is then a named weight which takes the number for that named weight from it's family or default
//
//  Available font styles:
//    extend//take all of the styles from these defined styles in priority order
//
//    family – This chooses the font-family from the chosen list
//    weight – font-weight from the list that the font has
//
//    line-height – line-height
//    margin-top – margin-top
//    margin-bottom – margin-bottom
//    size – font-size
//    letter-spacing – letter-spacing
//    style – font-style
//    transform – text-transform
//    color – color

$font-families: (
  header: sans-serif,
  body: serif,
) !default;

$font-weights: (
  _default: (
    light:     200,
    regular:   400,
    bold:      700
  ),
) !default;

// Converts value (defaults to px) to rem
@function convert-to-rem ($size) {
  $fs-base: map-get($base-font-styling, size);

  @return (1rem) / $fs-base * $size;
}

// Retrieves value of provided attribute from provided font. Same syntax as Ember.get.
@function font-get ($font-name, $attribute) {
  $font: map-get($text-styles, $font-name);

  @if map-has-key($font, $attribute) {
    @return map-get($font, $attribute);

  } @else if map-has-key($font, extend) {
    @each $extend in map-get($font, extend) {
      @if font-get($extend, $attribute) != null {
        @return font-get($extend, $attribute);
      }
    }
  }

  @return null;
}
// api:private gets the font-weight for provided font-name
@function font-weight ($font-name) {
  @if $font-name == null {
    @return null;
  }

  $font-family: font-get($font-name, family);
  @if $font-family == null {
    @return null;
  }

  $weight: font-get($font-name, weight);
  @if $weight == null {
    @return null;
  }

  //  If the family set has its own weights, try to use them
  $found-weight: font-family-weight($font-family, $weight);
  @if $found-weight != null {
    @return $found-weight;
  }

  //  If it hasn't, or the list doesn't contain the requested weight
  //    try the _default set
  $weights: map-get($font-weights, _default);
  @if $weights != null {
    @if map-has-key($weights, $weight) {
      @return map-get($weights, $weight);
    }
  }

  @return null;
}

// api:public Gets the named font weight for a chosen family
@function font-family-weight($family, $weight) {
  @if not map-has-key($font-families, $family) {
    @error("No family found with name '#{$family}'");
  }

  $weights: map-get($font-weights, $family);
  @if not $weights {
    @warn("Font family '#{$family}' has no weights defined");
  } @else if map-has-key($weights, $weight) {
    @return map-get($weights, $weight);
  }

  $weights: map-get($font-weights, _default);
  @if map-has-key($weights, $weight) {
    @warn("Font family '#{$family}' has no weight of '#{$weight}'. Falling back to '_default'");
    @return map-get($weights, $weight);
  }

  @error("font-weight of '#{$weight}' is in neither family '#{$family}' nor '_default'");
}

// api:public Print styles for rems, falling back to the less scalable pixels
@mixin rem-with-default-px ($size, $rule: font-size) {
  #{$rule}: (1px) * $size;
  #{$rule}: convert-to-rem($size);
}

// api:public Creates font declarations to be used in classes
@mixin font-rules ($font-name) {
  $line-height: font-get($font-name, line-height);
  @if $line-height != null {
    @include rem-with-default-px($line-height, line-height);
  }

  $margin-top: font-get($font-name, margin-top);
  @if $margin-top != null {
    @include rem-with-default-px($margin-top, margin-top);
  }

  $margin-bottom: font-get($font-name, margin-bottom);
  @if $margin-bottom != null {
    @include rem-with-default-px($margin-bottom, margin-bottom);
  }

  $size: font-get($font-name, size);
  @if $size != null {
    @include rem-with-default-px($size);
  }

  $font-family: font-get($font-name, family);
  @if $font-family != null {
    font-family: map-get($font-families, $font-family);
  }

  $weight: font-weight($font-name);
  @if $font-family != null {
    font-weight: font-weight($font-name);
  }

  $letter-spacing: font-get($font-name, letter-spacing);
  @if $letter-spacing != null {
    @include rem-with-default-px($letter-spacing, letter-spacing);
  }

  $style: font-get($font-name, style);
  @if $style != null {
    @if $style == italic or $style == normal {
      font-style: $style;
    }
  }

  $transform: font-get($font-name, transform);
  @if $transform != null {
    @if $transform == uppercase or $transform == lowercase or $transform == capitalize or $transform == none {
      text-transform: $transform;
    }
  }

  $color: font-get($font-name, color);
  @if $color != null {
    color: $color;
  }
}

// api:public run after font definitions
@mixin print-fonts-as-classes ($_prefix: null) {
  $prefix: null;

  @if $_prefix != null {
    $prefix: $_prefix + '-';
  }

  @each $name, $value in $text-styles {
    @if str-slice($name, 0, 1) != '_' {
      .#{$prefix}#{$name} {
        @include font-rules($name);
      }
    }
  }
}
